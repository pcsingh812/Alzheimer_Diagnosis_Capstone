#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import streamlit as st
import pickle
import numpy as np

with open('/Users/priyankasingh/Documents/Capstone/gb_model.pkl', 'rb') as file:
    model = pickle.load(file)

with open('/Users/priyankasingh/Documents/Capstone/encoder.pkl', 'rb') as file:
    encoder = pickle.load(file)

with open('/Users/priyankasingh/Documents/Capstone/scaler.pkl', 'rb') as file:
    scaler = pickle.load(file)
    
st.title('Alzheimer‚Äôs Risk Prediction üß†')
st.subheader("Please fill out the form")

continent = st.selectbox("Continent", ["Europe", "Asia", "Oceania", "America", "Africa"])
age = st.number_input("Age", min_value=0, max_value=100, value=70)
gender = st.selectbox("Gender", ["Male", "Female"])
education = st.number_input("Education Level", min_value=0, max_value=25, value=12)
bmi = st.number_input("BMI", min_value=10.0, max_value=60.0, value=25.0)
physical_activity = st.selectbox("Physical Activity Level", ["Low", "Medium", "High"])
smoking_status = st.selectbox("Smoking Status", ["Never", "Former", "Current"])
alcohol = st.selectbox("Alcohol Consumption", ["Never", "Occasionally", "Regularly"])
diabetes = st.radio("Diabetes", ["No", "Yes"])
hypertension = st.radio("Hypertension", ["No", "Yes"])
cholesterol = st.selectbox("Cholesterol Level", ["Normal", "High"])
family_history = st.radio("Family History of Alzheimer‚Äôs", ["No", "Yes"])
cognitive_score = st.number_input("Cognitive Test Score", min_value=0, max_value=100, value=50)
depression = st.selectbox("Depression Level", ["Low", "Medium", "High"])
sleep_quality = st.selectbox("Sleep Quality", ["Poor", "Average", "Good"])
dietary_habits = st.selectbox("Dietary Habits", ["Healthy", "Average", "Unhealthy"])
air_pollution = st.selectbox("Air Pollution Exposure", ["Low", "Medium", "High"])
employment = st.selectbox("Employment Status", ["Employed", "Unemployed", "Retired"])
marital_status = st.selectbox("Marital Status", ["Single", "Married", "Widowed"])
genetic_risk = st.radio("Genetic Risk Factor (APOE-Œµ4 allele)", ["No", "Yes"])
social_engagement = st.selectbox("Social Engagement Level", ["Low", "Medium", "High"])
income = st.selectbox("Income Level", ["Low", "Medium", "High"])
stress = st.selectbox("Stress Levels", ["Low", "Medium", "High"])
urban_rural = st.selectbox("Urban vs Rural Living", ["Urban", "Rural"])

def preprocess_input(gender, physical_activity, smoking_status, alcohol, diabetes,
                                   hypertension, cholesterol, family_history, depression, sleep_quality,
                                   dietary_habits, air_pollution, employment, marital_status, genetic_risk,
                                   social_engagement, income, stress, urban_rural, continent, age,
                                   education, bmi, cognitive_score, encoder, scaler):
    # One-hot encode the two categorical features
    cat_input = encoder.transform([[gender, physical_activity, smoking_status, alcohol, diabetes,
                                       hypertension, cholesterol, family_history, depression, sleep_quality,
                                       dietary_habits, air_pollution, employment, marital_status, genetic_risk,
                                       social_engagement, income, stress, urban_rural, continent]])

    # Scale the two numerical features
    num_input = scaler.transform([[age, education, bmi, cognitive_score]])

    # Combine encoded categorical and scaled numerical inputs
    final_input = np.concatenate([cat_input, num_input], axis=1)

    return final_input

if st.button("Predict", type="primary"):
    processed_input = preprocess_input(gender, physical_activity, smoking_status, alcohol, diabetes,
                                       hypertension, cholesterol, family_history, depression, sleep_quality,
                                       dietary_habits, air_pollution, employment, marital_status, genetic_risk,
                                       social_engagement, income, stress, urban_rural, continent, age,
                                       education, bmi, cognitive_score, encoder, scaler)
    class_probs = model.predict_proba(processed_input)[0]  # [0] to get the first sample result

    # Get the predicted class (0 for 'No', 1 for 'Yes')
    predicted_class = model.predict(processed_input)[0]
    
    # Convert to 'Yes' or 'No'
    predicted_label = "Yes" if predicted_class == 1 else "No"
    
    # Display results
    st.success(f"Predicted Diagnosis: {predicted_label}")
    st.success(f"Class Probabilities: [No: {class_probs[0]:.3f}, Yes: {class_probs[1]:.3f}]")
    

st.markdown("---")
st.markdown("### ‚ö†Ô∏è Disclaimer")
st.markdown("""
This application is developed as part of a capstone project and uses a **synthetic dataset** to demonstrate machine learning deployment capabilities.  
The predictions generated by this model are **not based on real clinical data** and should **not be interpreted as medical advice or diagnosis**.  
This tool is solely intended for **educational and demonstration purposes**.  
Please consult a qualified healthcare professional for any medical concerns or diagnoses.
""")
